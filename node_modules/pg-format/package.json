{
  "author": {
    "name": "Datalanche, Inc.",
    "url": "https://www.datalanche.com"
  },
  "name": "pg-format",
  "license": "MIT",
  "homepage": "https://github.com/datalanche/node-pg-format",
  "description": "Node.js implementation of PostgreSQL's format() to safely create dynamic SQL queries.",
  "version": "1.0.4",
  "repository": {
    "type": "git",
    "url": "https://github.com/datalanche/node-pg-format.git"
  },
  "main": "lib/index.js",
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">=4.0"
  },
  "dependencies": {},
  "devDependencies": {
    "istanbul": "0.4.2",
    "mocha": "2.4.5",
    "should": "8.2.1"
  },
  "scripts": {
    "test": "node ./node_modules/mocha/bin/mocha",
    "cover-test": "node_modules/.bin/istanbul cover node_modules/.bin/_mocha"
  },
  "readme": "node-pg-format\n==============\n\nNode.js implementation of [PostgreSQL format()](http://www.postgresql.org/docs/9.3/static/functions-string.html#FUNCTIONS-STRING-FORMAT) to safely create dynamic SQL queries. SQL identifiers and literals are escaped to help prevent SQL injection. The behavior is equivalent to [PostgreSQL format()](http://www.postgresql.org/docs/9.3/static/functions-string.html#FUNCTIONS-STRING-FORMAT). This module also supports Node buffers, arrays, and objects which is explained [below](#arrobject).\n\n## Install\n\n    npm install pg-format\n\n## Example\n```js\nvar format = require('pg-format');\nvar sql = format('SELECT * FROM %I WHERE my_col = %L %s', 'my_table', 34, 'LIMIT 10');\nconsole.log(sql); // SELECT * FROM my_table WHERE my_col = '34' LIMIT 10\n```\n\n## API\n\n### format(fmt, ...)\nReturns a formatted string based on ```fmt``` which has a style similar to the C function ```sprintf()```.\n* ```%%``` outputs a literal ```%``` character.\n* ```%I``` outputs an escaped SQL identifier.\n* ```%L``` outputs an escaped SQL literal.\n* ```%s``` outputs a simple string.\n\n### format.config(cfg)\nChanges the global configuration. You can change which letters are used to denote identifiers, literals, and strings in the formatted string. This is useful when the formatted string contains a PL/pgSQL function which calls [PostgreSQL format()](http://www.postgresql.org/docs/9.3/static/functions-string.html#FUNCTIONS-STRING-FORMAT) itself.\n```js\nvar format = require('pg-format');\nformat.config({\n    pattern: {\n        ident: 'V',\n        literal: 'C',\n        string: 't'\n    }\n});\nformat.config(); // reset to default\n```\n\n### format.ident(input)\nReturns the input as an escaped SQL identifier string. ```undefined```, ```null```, and objects will throw an error.\n\n### format.literal(input)\nReturns the input as an escaped SQL literal string. ```undefined``` and ```null``` will return ```'NULL'```;\n\n### format.string(input)\nReturns the input as a simple string. ```undefined``` and ```null``` will return an empty string. If an array element is ```undefined``` or ```null```, it will be removed from the output string.\n\n### format.withArray(fmt, array)\nSame as ```format(fmt, ...)``` except parameters are provided in an array rather than as function arguments. This is useful when dynamically creating a SQL query and the number of parameters is unknown or variable.\n\n## <a name=\"buffer\"></a> Node Buffers\nNode buffers can be used for literals (```%L```) and strings (```%s```), and will be converted to [PostgreSQL bytea hex format](http://www.postgresql.org/docs/9.3/static/datatype-binary.html).\n\n## <a name=\"arrobject\"></a> Arrays and Objects\nFor arrays, each element is escaped when appropriate and concatenated to a comma-delimited string. Nested arrays are turned into grouped lists (for bulk inserts), e.g. [['a', 'b'], ['c', 'd']] turns into ('a', 'b'), ('c', 'd'). Nested array expansion can be used for literals (```%L```) and strings (```%s```), but not identifiers (```%I```).  \nFor objects, ```JSON.stringify()``` is called and the resulting string is escaped if appropriate. Objects can be used for literals (```%L```) and strings (```%s```), but not identifiers (```%I```). See the example below.\n\n```js\nvar format = require('pg-format');\n\nvar myArray = [ 1, 2, 3 ];\nvar myObject = { a: 1, b: 2 };\nvar myNestedArray = [['a', 1], ['b', 2]];\n\nvar sql = format('SELECT * FROM t WHERE c1 IN (%L) AND c2 = %L', myArray, myObject);\nconsole.log(sql); // SELECT * FROM t WHERE c1 IN ('1','2','3') AND c2 = '{\"a\":1,\"b\":2}'\n\nsql = format('INSERT INTO t (name, age) VALUES %L', myNestedArray); \nconsole.log(sql); // INSERT INTO t (name, age) VALUES ('a', '1'), ('b', '2')\n```\n\n## Testing\n\n```\nnpm install\nnpm test\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/datalanche/node-pg-format/issues"
  },
  "_id": "pg-format@1.0.4",
  "dist": {
    "shasum": "feefcdcdf0ce22dfb13e800bc1e950115d192eb9"
  },
  "_from": "pg-format@",
  "_resolved": "https://registry.npmjs.org/pg-format/-/pg-format-1.0.4.tgz"
}
